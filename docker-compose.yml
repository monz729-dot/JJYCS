version: '3.8'

services:
  mysql:
    image: mysql:8.0
    container_name: ycs-lms-mysql
    environment:
      MYSQL_ROOT_PASSWORD: root123
      MYSQL_DATABASE: ycs_lms
      MYSQL_USER: lms_user
      MYSQL_PASSWORD: lms_pass123
      TZ: Asia/Bangkok
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./docs/DB_SCHEMA.sql:/docker-entrypoint-initdb.d/01-schema.sql
    networks:
      - ycs-lms-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  redis:
    image: redis:7-alpine
    container_name: ycs-lms-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ycs-lms-network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: ycs-lms-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - ycs-lms-network

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: ycs-lms-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
      - ycs-lms-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ycs-lms-backend
    depends_on:
      - mysql
      - redis
      - kafka
    ports:
      - "8080:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      DB_URL: jdbc:mysql://mysql:3306/ycs_lms?useSSL=false&serverTimezone=Asia/Bangkok&characterEncoding=UTF-8
      DB_USERNAME: lms_user
      DB_PASSWORD: lms_pass123
      REDIS_HOST: redis
      REDIS_PORT: 6379
      KAFKA_BROKERS: kafka:9092
    volumes:
      - ./backend/logs:/app/logs
      - ./uploads:/app/uploads
    networks:
      - ycs-lms-network
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: ycs-lms-frontend
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - ycs-lms-network
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:latest
    container_name: ycs-lms-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./ops/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - ycs-lms-network

  grafana:
    image: grafana/grafana:latest
    container_name: ycs-lms-grafana
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
      GF_INSTALL_PLUGINS: redis-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./ops/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
    depends_on:
      - prometheus
    networks:
      - ycs-lms-network

volumes:
  mysql_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  ycs-lms-network:
    driver: bridge