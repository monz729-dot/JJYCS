# Docker 환경용 Spring Boot 설정
server:
  port: 8080
  servlet:
    context-path: /

spring:
  profiles:
    active: docker
  
  # 데이터베이스 설정
  datasource:
    url: ${DB_URL:jdbc:mysql://mysql:3306/ycs_lms?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=Asia/Bangkok&characterEncoding=UTF-8}
    username: ${DB_USERNAME:lms_user}
    password: ${DB_PASSWORD:lms_pass123}
    driver-class-name: com.mysql.cj.jdbc.Driver
    hikari:
      connection-timeout: 20000
      maximum-pool-size: 20
      minimum-idle: 5
      idle-timeout: 300000
      max-lifetime: 1200000
      leak-detection-threshold: 60000

  # JPA 설정
  jpa:
    hibernate:
      ddl-auto: validate  # Flyway가 스키마 관리
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL8Dialect
        format_sql: false
        use_sql_comments: false
        jdbc:
          batch_size: 20
        order_inserts: true
        order_updates: true

  # Flyway 마이그레이션
  flyway:
    enabled: true
    locations: classpath:db/migration
    baseline-on-migrate: true
    validate-on-migrate: true

  # Redis 설정
  redis:
    host: ${REDIS_HOST:redis}
    port: ${REDIS_PORT:6379}
    timeout: 2000ms
    lettuce:
      pool:
        max-active: 8
        max-idle: 8
        min-idle: 0

  # Kafka 설정
  kafka:
    bootstrap-servers: ${KAFKA_BROKERS:kafka:9092}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
    consumer:
      group-id: ycs-lms-docker
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer

  # 메일 설정 (실제 SMTP 사용)
  mail:
    host: smtp.gmail.com
    port: 587
    username: ${SMTP_USER:}
    password: ${SMTP_PASS:}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true

  # 파일 업로드
  servlet:
    multipart:
      max-file-size: 10MB
      max-request-size: 50MB

# 액추에이터 (모니터링)
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: when_authorized
  metrics:
    export:
      prometheus:
        enabled: true

# 로깅 설정
logging:
  level:
    com.ycs.lms: INFO
    org.springframework.web: WARN
    org.hibernate.SQL: WARN
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
  file:
    name: /app/logs/ycs-lms.log

# 애플리케이션 설정
app:
  name: YCS LMS
  version: 1.0.0
  timezone: Asia/Bangkok
  jwt:
    secret: ${JWT_SECRET:production_jwt_secret_key_change_this}
    expires-in: 86400  # 1 day
  upload:
    path: /app/uploads
    max-size: 10485760  # 10MB
  business-rules:
    cbm-threshold: 29.0
    thb-amount-threshold: 1500.0
    auto-air-conversion: true
    require-member-code: true
  external-apis:
    ems:
      url: ${EMS_API_URL:}
      key: ${EMS_API_KEY:}
    hs:
      url: ${HS_API_URL:}
      key: ${HS_API_KEY:}
    exchange-rate:
      url: ${EXCHANGE_RATE_API_URL:}
      key: ${EXCHANGE_RATE_API_KEY:}
  cors:
    allowed-origins: 
      - http://localhost:3000
      - http://frontend:80
    allowed-methods:
      - GET
      - POST
      - PUT
      - DELETE
      - OPTIONS
    allowed-headers:
      - "*"
    allow-credentials: true

# Swagger/OpenAPI 설정
springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger-ui.html
    enabled: true
  packages-to-scan: com.ycs.lms.controller