# Docker Compose configuration for YSC LMS with backup services
# 
# This configuration includes all production services plus backup and monitoring
# services for comprehensive data persistence and disaster recovery.

version: '3.8'

services:
  # Main application services
  backend:
    build: ../backend
    container_name: ycs-lms-backend
    ports:
      - "${BACKEND_PORT:-8081}:8081"
    environment:
      - SPRING_PROFILES_ACTIVE=backup,production
      - DB_URL=jdbc:mysql://mysql:3306/ycs_lms
      - DB_USERNAME=ycs_user
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_URL=redis://redis:6379
      - KAFKA_BROKERS=kafka:9092
      - BACKUP_S3_BUCKET=${BACKUP_S3_BUCKET}
      - BACKUP_ENCRYPTION_KEY=${BACKUP_ENCRYPTION_KEY}
      - FILES_BACKUP_S3_BUCKET=${FILES_BACKUP_S3_BUCKET}
      - CONFIG_BACKUP_REPO=${CONFIG_BACKUP_REPO}
      - AUDIT_ARCHIVE_LOCATION=${AUDIT_ARCHIVE_LOCATION}
      - BACKUP_SLACK_WEBHOOK=${BACKUP_SLACK_WEBHOOK}
    volumes:
      - app_uploads:/app/uploads
      - app_logs:/app/logs
      - app_config:/app/config
      - backup_data:/app/backups
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - ycs-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  frontend:
    build: ../frontend
    container_name: ycs-lms-frontend
    ports:
      - "${FRONTEND_PORT:-3003}:80"
    environment:
      - VITE_API_BASE_URL=http://localhost:${BACKEND_PORT:-8081}/api
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - ycs-network

  # Database services
  mysql:
    image: mysql:8.0
    container_name: ycs-lms-mysql
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ycs_lms
      MYSQL_USER: ycs_user
      MYSQL_PASSWORD: ${DB_PASSWORD}
    volumes:
      - mysql_data:/var/lib/mysql
      - ./mysql/conf.d:/etc/mysql/conf.d
      - backup_data:/backup
    ports:
      - "${MYSQL_PORT:-3306}:3306"
    restart: unless-stopped
    networks:
      - ycs-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    command: |
      --innodb-buffer-pool-size=512M
      --innodb-log-file-size=256M
      --max-connections=1000
      --log-bin=mysql-bin
      --binlog-format=ROW
      --expire-logs-days=7

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: ycs-lms-redis
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    restart: unless-stopped
    networks:
      - ycs-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backup services
  backup-scheduler:
    build:
      context: ../
      dockerfile: docker/Dockerfile.backup
    container_name: ycs-lms-backup-scheduler
    environment:
      - BACKUP_TYPE=scheduled
      - API_BASE_URL=http://backend:8081/api
      - ADMIN_EMAIL=${ADMIN_EMAIL:-yadmin@ycs.com}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD:-YSCAdmin2024!}
      - BACKUP_RETENTION_DAYS=30
      - S3_ACCESS_KEY=${AWS_ACCESS_KEY_ID}
      - S3_SECRET_KEY=${AWS_SECRET_ACCESS_KEY}
      - S3_REGION=${AWS_REGION:-us-east-1}
      - SLACK_WEBHOOK_URL=${BACKUP_SLACK_WEBHOOK}
    volumes:
      - backup_data:/backup
      - app_uploads:/app/uploads:ro
      - app_logs:/app/logs:ro
      - app_config:/app/config:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - ycs-network
    # Run backup checks every hour
    command: |
      sh -c "
        while true; do
          echo \"Running scheduled backup check at \$(date)\"
          /app/scripts/backup.sh --health
          sleep 3600
        done
      "

  # Database backup container
  mysql-backup:
    image: mysql:8.0
    container_name: ycs-lms-mysql-backup
    environment:
      - MYSQL_HOST=mysql
      - MYSQL_PORT=3306
      - MYSQL_DATABASE=ycs_lms
      - MYSQL_USER=ycs_user
      - MYSQL_PASSWORD=${DB_PASSWORD}
      - BACKUP_RETENTION_DAYS=30
      - S3_BUCKET=${BACKUP_S3_BUCKET}
      - BACKUP_ENCRYPTION_KEY=${BACKUP_ENCRYPTION_KEY}
    volumes:
      - backup_data:/backup
      - ./scripts:/scripts
    depends_on:
      mysql:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - ycs-network
    # Daily full backup at 2 AM
    entrypoint: |
      sh -c "
        echo '0 2 * * * /scripts/mysql-backup.sh --full' > /etc/crontabs/root
        echo '0 4 * * 1-6 /scripts/mysql-backup.sh --incremental' >> /etc/crontabs/root
        crond -f
      "

  # File backup container
  file-backup:
    image: alpine:latest
    container_name: ycs-lms-file-backup
    environment:
      - BACKUP_RETENTION_DAYS=90
      - S3_BUCKET=${FILES_BACKUP_S3_BUCKET}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION:-us-east-1}
    volumes:
      - backup_data:/backup
      - app_uploads:/app/uploads:ro
      - app_logs:/app/logs:ro
      - app_config:/app/config:ro
      - ./scripts:/scripts
    restart: unless-stopped
    networks:
      - ycs-network
    # Install required packages and set up cron
    entrypoint: |
      sh -c "
        apk add --no-cache aws-cli curl tar gzip
        echo '30 2 * * * /scripts/file-backup.sh' > /etc/crontabs/root
        crond -f
      "

  # Monitoring services
  prometheus:
    image: prom/prometheus:latest
    container_name: ycs-lms-prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - ycs-network

  grafana:
    image: grafana/grafana:latest
    container_name: ycs-lms-grafana
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - ycs-network

  # Log aggregation
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.6.0
    container_name: ycs-lms-elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "${ELASTICSEARCH_PORT:-9200}:9200"
    restart: unless-stopped
    networks:
      - ycs-network

  kibana:
    image: docker.elastic.co/kibana/kibana:8.6.0
    container_name: ycs-lms-kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "${KIBANA_PORT:-5601}:5601"
    depends_on:
      - elasticsearch
    restart: unless-stopped
    networks:
      - ycs-network

  # Reverse proxy with SSL termination
  nginx:
    image: nginx:alpine
    container_name: ycs-lms-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - nginx_logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    networks:
      - ycs-network

networks:
  ycs-network:
    driver: bridge

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  app_uploads:
    driver: local
  app_logs:
    driver: local
  app_config:
    driver: local
  backup_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local
  nginx_logs:
    driver: local