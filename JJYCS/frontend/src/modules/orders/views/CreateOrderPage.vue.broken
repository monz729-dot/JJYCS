<template>
  <div class="page-container">
    <!-- 성공/에러 메시지 -->
    <div v-if="success || error" class="toast-message">
      <div :class="error ? 'alert-error' : 'alert-success'">
        {{ success || error }}
      </div>
    </div>

    <!-- 검증 메시지 -->
    <div v-if="validationMessages.length > 0" class="validation-messages">
      <div 
        v-for="(msg, index) in validationMessages" 
        :key="index" 
        :class="'alert alert-' + msg.type"
      >
        {{ msg.message }}
      </div>
    </div>

    <!-- 헤더 -->
    <header class="header">
      <div class="header-content">
        <button class="back-btn" @click="goBack">
          <svg width="24" height="24" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
          </svg>
        </button>
        <div class="header-info">
          <h1>배송 접수</h1>
          <p class="header-subtitle">새로운 배송을 접수해보세요 - 창고 도착 후 청구서 발행</p>
        </div>
      </div>
    </header>

    <!-- 메인 콘텐츠 -->
    <main class="main-content">
      <!-- 진행 상태 -->
      <div class="form-progress">
        <div class="progress-step">
          <div class="progress-number active">1</div>
          <div class="progress-text active">배송 정보</div>
        </div>
        <div class="progress-divider"></div>
        <div class="progress-step">
          <div class="progress-number">2</div>
          <div class="progress-text">확인</div>
        </div>
        <div class="progress-divider"></div>
        <div class="progress-step">
          <div class="progress-number">3</div>
          <div class="progress-text">완료</div>
        </div>
      </div>

      <form @submit.prevent="handleSubmit">
        <!-- 주문자 정보 -->
        <div class="form-section">
          <h2 class="section-title">주문자 정보</h2>
          
          <div class="form-row">
            <div class="form-group">
              <label class="form-label">고객 아이디</label>
              <input 
                type="text" 
                class="form-input disabled" 
                :value="customerId"
                disabled
              >
            </div>
            <div class="form-group">
              <label class="form-label">이름</label>
              <input 
                type="text" 
                class="form-input disabled" 
                :value="authStore.user?.name || ''"
                disabled
              >
            </div>
          </div>
          
          <div class="form-row">
            <div class="form-group">
              <label class="form-label">이메일</label>
              <input 
                type="email" 
                class="form-input disabled" 
                :value="authStore.user?.email || ''"
                disabled
              >
            </div>
            <div class="form-group">
              <label class="form-label">연락처</label>
              <input 
                type="tel" 
                class="form-input disabled" 
                :value="authStore.user?.phone || ''"
                disabled
              >
            </div>
          </div>
          
          <div v-if="authStore.user?.userType !== 'GENERAL'" class="form-group">
            <label class="form-label">회사명</label>
            <input 
              type="text" 
              class="form-input disabled" 
              :value="authStore.user?.companyName || ''"
              disabled
            >
          </div>
        </div>

        <!-- 송장 정보 (필수) -->
        <div class="form-section">
          <h2 class="section-title">
            우체국 송장번호
            <span class="badge-required">필수</span>
          </h2>
          
          <div class="form-group">
            <label class="form-label required">송장번호</label>
            <input 
              type="text" 
              class="form-input" 
              v-model="orderForm.trackingNumber"
              placeholder="우체국 송장번호를 입력해주세요" 
              required
            >
            <p class="form-hint">
              우체국 송장번호가 없으면 주문을 접수할 수 없습니다.
            </p>
          </div>
        </div>

        <!-- 배송 정보 -->
        <div class="form-section">
          <h2 class="section-title">배송 정보</h2>
          
          <div class="form-group">
            <label class="form-label">배송 유형</label>
            <div class="shipping-type-grid">
              <label 
                :class="orderForm.shippingType === 'sea' ? 'shipping-option active' : 'shipping-option'"
              >
                <input 
                  type="radio" 
                  name="shippingType" 
                  value="sea" 
                  v-model="orderForm.shippingType"
                  class="radio-input"
                >
                <div class="shipping-content">
                  <div class="shipping-title">해상운송</div>
                  <div class="shipping-subtitle">경제적, 15-30일</div>
                </div>
              </label>
              <label 
                :class="orderForm.shippingType === 'air' ? 'shipping-option active' : 'shipping-option'"
              >
                <input 
                  type="radio" 
                  name="shippingType" 
                  value="air" 
                  v-model="orderForm.shippingType"
                  class="radio-input"
                >
                <div class="shipping-content">
                  <div class="shipping-title">항공운송</div>
                  <div class="shipping-subtitle">신속, 3-7일 (추가 검증 필요)</div>
                </div>
              </label>
            </div>
          </div>

          <div class="form-row">
            <div class="form-group">
              <label class="form-label">도착 국가</label>
              <select class="form-select" v-model="orderForm.country">
                <option value="thailand">🇹🇭 태국</option>
                <option value="vietnam">🇻🇳 베트남</option>
                <option value="philippines">🇵🇭 필리핀</option>
                <option value="indonesia">🇮🇩 인도네시아</option>
              </select>
            </div>
            <div class="form-group">
              <label class="form-label">우편번호</label>
              <input 
                type="text" 
                class="form-input" 
                v-model="orderForm.postalCode"
                :placeholder="getPostalCodeGuide(orderForm.country)"
              >
              <p class="form-hint">
                {{ getPostalCodeGuide(orderForm.country) }}
              </p>
            </div>
          </div>
        </div>

        <!-- 수취인 정보 -->
        <div class="form-section">
          <h2 class="section-title">
            수취인 정보
            <span 
              v-if="orderForm.shippingType === 'air' && hasHighValueItems"
              class="badge-required"
            >필수</span>
          </h2>
          
          <div class="form-row">
            <div class="form-group">
              <label class="form-label required">수취인 이름</label>
              <input 
                type="text" 
                class="form-input" 
                v-model="orderForm.recipientName"
                placeholder="수취인 이름을 입력해주세요" 
                required
              >
            </div>
            <div class="form-group">
              <label class="form-label required">수취인 연락처</label>
              <input 
                type="tel" 
                class="form-input" 
                v-model="orderForm.recipientPhone"
                placeholder="수취인 연락처를 입력해주세요" 
                required
              >
            </div>
          </div>
          
          <div class="form-group">
            <label class="form-label required">수취인 주소</label>
            <textarea 
              class="form-textarea" 
              v-model="orderForm.recipientAddress"
              placeholder="수취인 주소를 입력해주세요"
              required
            ></textarea>
          </div>
          
          <div class="form-group">
            <label class="form-label">수취인 우편번호</label>
            <input 
              type="text" 
              class="form-input" 
              v-model="orderForm.recipientPostalCode"
              :placeholder="getPostalCodeGuide(orderForm.country)"
            >
          </div>
        </div>

        <!-- 품목 정보 -->
        <div class="form-section">
          <div class="section-header">
            <h2 class="section-title">품목 정보</h2>
            <div class="section-actions">
              <button 
                v-if="authStore.user?.userType === 'CORPORATE'"
                type="button" 
                class="btn-outline btn-bulk"
                @click="showBulkUpload = true"
              >
                <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                </svg>
                일괄등록
              </button>
              <button type="button" class="btn-primary btn-add" @click="addItem">
                <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                </svg>
                품목 추가
              </button>
            </div>
          </div>
          
          <div class="item-list">
            <div 
              v-for="(item, index) in orderForm.items" 
              :key="item.id"
              class="item-card"
            >
              <div class="item-header">
                <div class="item-title">품목 {{ index + 1 }}</div>
                <button 
                  v-if="orderForm.items.length > 1"
                  type="button" 
                  class="remove-item-btn" 
                  @click="removeItem(index)"
                >
                  <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                  </svg>
                </button>
              </div>
              
              <!-- HS CODE 필드 -->
              <div class="form-group">
                <label class="form-label">HS CODE</label>
                <div class="input-with-button">
                  <input 
                    type="text" 
                    class="form-input" 
                    v-model="item.hscode"
                    placeholder="HS CODE 입력"
                  >
                  <button
                    type="button"
                    class="input-button"
                    @click="openHSCodeDialog(item.id)"
                  >
                    <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                    </svg>
                  </button>
                </div>
              </div>

              <!-- 품목명 -->
              <div class="form-group">
                <label class="form-label required">품목명</label>
                <input 
                  type="text" 
                  class="form-input" 
                  v-model="item.description"
                  placeholder="품목명 입력" 
                  required
                >
              </div>

              <!-- 수량, 중량 -->
              <div class="form-row">
                <div class="form-group">
                  <label class="form-label required">수량</label>
                  <input 
                    type="number" 
                    class="form-input" 
                    v-model.number="item.quantity"
                    min="1"
                    placeholder="수량" 
                    required
                  >
                </div>
                <div class="form-group">
                  <label class="form-label required">중량 (kg)</label>
                  <input 
                    type="number" 
                    class="form-input" 
                    v-model.number="item.weight"
                    step="0.1"
                    placeholder="중량" 
                    required
                  >
                </div>
              </div>

              <!-- 단가 (항공 운송 검증용) -->
              <div class="form-group">
                <label class="form-label">
                  단가 (THB)
                  <span v-if="orderForm.shippingType === 'air'" class="badge-info">항공운송 검증</span>
                </label>
                <input 
                  type="number" 
                  class="form-input" 
                  v-model.number="item.unitPrice"
                  step="0.01"
                  placeholder="단가 (태국 바트)"
                >
                <p 
                  v-if="orderForm.shippingType === 'air' && item.unitPrice && item.unitPrice > 1500"
                  class="form-hint warning-hint"
                >
                  ⚠️ THB 1,500 초과 시 수취인 정보 및 추가 서류가 필요합니다.
                </p>
              </div>

              <!-- 치수 및 CBM -->
              <div class="form-group">
                <label class="form-label">치수 및 CBM</label>
                <div class="form-row grid-3">
                  <input 
                    type="number" 
                    class="form-input" 
                    v-model.number="item.width"
                    step="0.1"
                    placeholder="가로(cm)"
                  >
                  <input 
                    type="number" 
                    class="form-input" 
                    v-model.number="item.height"
                    step="0.1"
                    placeholder="세로(cm)"
                  >
                  <input 
                    type="number" 
                    class="form-input" 
                    v-model.number="item.depth"
                    step="0.1"
                    placeholder="높이(cm)"
                  >
                </div>

                <!-- CBM 자동계산 결과 -->
                <div v-if="item.cbm > 0" class="cbm-result">
                  <div class="cbm-display">
                    <div class="cbm-info">
                      <p class="cbm-title">CBM 자동계산</p>
                      <p class="cbm-calculation">
                        {{ item.width }} × {{ item.height }} × {{ item.depth }} = {{ item.cbm }} m³
                      </p>
                    </div>
                    <div class="cbm-value">
                      <p class="cbm-number">{{ item.cbm }} m³</p>
                      <p class="cbm-note">소수점 3번째자리 반올림</p>
                    </div>
                  </div>
                </div>

                <!-- EMS 부피무게 계산 -->
                <div v-if="getVolumetricWeight(item) > 0" class="volumetric-result">
                  <div class="volumetric-display">
                    <div class="volumetric-info">
                      <p class="volumetric-title">EMS 부피무게</p>
                      <p class="volumetric-calculation">
                        {{ item.width }} × {{ item.height }} × {{ item.depth }} ÷ 6000 = {{ getVolumetricWeight(item).toFixed(2) }}kg
                      </p>
                    </div>
                    <div class="volumetric-badge">
                      <span :class="'badge badge-' + getVolumetricWeightScore(item.weight, getVolumetricWeight(item)).toLowerCase()">
                        {{ getVolumetricWeightScore(item.weight, getVolumetricWeight(item)) }}
                      </span>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- 특별 요청사항 -->
        <div class="form-section">
          <h2 class="section-title">특별 요청사항</h2>
          <textarea
            class="form-textarea"
            v-model="orderForm.specialRequests"
            placeholder="특별한 요청사항이 있으시면 입력해주세요..."
          ></textarea>
        </div>

        <!-- 리패킹 옵션 -->
        <div class="form-section">
          <h2 class="section-title">리패킹 서비스</h2>
          <label class="checkbox-label">
            <input 
              type="checkbox" 
              v-model="orderForm.repacking"
              class="checkbox-input"
            >
            <div class="checkbox-content">
              <div class="checkbox-title">리패킹 서비스 신청</div>
              <p class="checkbox-description">
                창고 도착 후 상품 상태에 따라 리패킹 작업을 진행합니다.
              </p>
            </div>
          </label>
        </div>

        <!-- 하단 버튼 -->
        <div class="form-actions">
          <button type="button" class="btn-outline btn-cancel" @click="handleCancel">
            취소
          </button>
          <button type="button" class="btn-outline btn-save" @click="saveDraft" :disabled="loading">
            {{ loading ? '저장 중...' : '임시저장' }}
          </button>
          <button 
            type="submit" 
            class="btn-primary btn-submit" 
            :disabled="!canSubmit || loading || hasErrorMessages"
          >
            {{ loading ? '처리 중...' : '접수완료' }}
          </button>
        </div>
      </form>
    </main>

    <!-- 하단 네비게이션 -->
    <nav class="mobile-nav">
      <div class="nav-grid">
        <button class="nav-item" @click="$router.push('/dashboard')">
          <svg class="nav-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6"></path>
          </svg>
        </button>
        <button class="nav-item active">
          <svg class="nav-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4"></path>
          </svg>
        </button>
        <button class="nav-item" @click="$router.push('/orders')">
          <svg class="nav-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
          </svg>
        </button>
        <button class="nav-item" @click="$router.push('/profile')">
          <svg class="nav-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
          </svg>
        </button>
        <button class="nav-item" @click="$router.push('/menu')">
          <svg class="nav-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 10h16M4 14h16M4 18h16"></path>
          </svg>
        </button>
      </div>
    </nav>
  </div>
</template>

<script setup lang="ts">
import { ref, reactive, computed, onMounted } from 'vue'
import { useRouter } from 'vue-router'
import { useAuthStore } from '@/stores/auth'
import { ordersApi } from '@/utils/api'

const router = useRouter()
const authStore = useAuthStore()

const loading = ref(false)
let itemIdCounter = 0

const orderForm = reactive({
  sender: {
    name: '',
    phone: '',
    address: ''
  },
  recipient: {
    name: '',
    phone: '',
    address: ''
  },
  deliveryRequest: '',
  items: [
    {
      id: ++itemIdCounter,
      name: '',
      quantity: 1,
      weight: 0,
      value: 0,
      currency: 'THB',
      category: '',
      dimensions: {
        width: 0,
        height: 0,
        depth: 0
      }
    }
  ]
})

const totalCBM = computed(() => {
  return orderForm.items.reduce((total, item) => {
    const { width, height, depth } = item.dimensions
    if (width && height && depth) {
      const cbm = (width * height * depth) / 1000000 // cm³ → m³
      return total + cbm
    }
    return total
  }, 0)
})

const shippingType = computed(() => {
  return totalCBM.value > 29 ? 'air' : 'sea'
})

const canSubmit = computed(() => {
  const hasSender = orderForm.sender.name && orderForm.sender.phone && orderForm.sender.address
  const hasRecipient = orderForm.recipient.name && orderForm.recipient.phone && orderForm.recipient.address
  const hasValidItems = orderForm.items.every(item => 
    item.name && item.quantity > 0 && item.weight > 0 && item.value > 0
  )
  
  return hasSender && hasRecipient && hasValidItems && orderForm.items.length > 0
})

const formatPhoneNumber = (event: Event, type: 'sender' | 'recipient') => {
  const input = event.target as HTMLInputElement
  let value = input.value.replace(/[^\d]/g, '')
  
  if (value.length > 3 && value.length <= 7) {
    value = value.slice(0, 3) + '-' + value.slice(3)
  } else if (value.length > 7) {
    value = value.slice(0, 3) + '-' + value.slice(3, 7) + '-' + value.slice(7, 11)
  }
  
  orderForm[type].phone = value
  input.value = value
}

const isHighValueItem = (item: any) => {
  if (item.currency === 'THB') {
    return item.value > 1500
  }
  // 간단한 환율 적용 (실제로는 API에서 받아와야 함)
  if (item.currency === 'USD') {
    return (item.value * 35) > 1500 // 1 USD ≈ 35 THB
  }
  if (item.currency === 'KRW') {
    return (item.value * 0.026) > 1500 // 1 KRW ≈ 0.026 THB
  }
  return false
}

const checkHighValue = () => {
  // 고가 품목 검사 로직 (필요시 경고 표시)
}

const calculateTotalCBM = () => {
  // totalCBM은 computed로 자동 계산됨
}

const addItem = () => {
  orderForm.items.push({
    id: ++itemIdCounter,
    name: '',
    quantity: 1,
    weight: 0,
    value: 0,
    currency: 'THB',
    category: '',
    dimensions: {
      width: 0,
      height: 0,
      depth: 0
    }
  })
}

const removeItem = (index: number) => {
  if (orderForm.items.length > 1) {
    orderForm.items.splice(index, 1)
  }
}

const saveDraft = async () => {
  try {
    // 임시저장 로직 (localStorage 또는 API 호출)
    localStorage.setItem('order_draft', JSON.stringify(orderForm))
    alert('주문이 임시저장되었습니다.')
  } catch (error) {
    console.error('임시저장 실패:', error)
    alert('임시저장에 실패했습니다.')
  }
}

const handleSubmit = async () => {
  if (!canSubmit.value || loading.value) return
  
  loading.value = true
  
  try {
    // CBM 29 초과 시 확인 메시지
    if (totalCBM.value > 29) {
      const confirm = window.confirm(
        `CBM이 ${totalCBM.value.toFixed(3)}m³로 29를 초과하여 항공 배송이 적용됩니다.\n` +
        '항공 배송료가 추가로 부과될 수 있습니다. 계속 진행하시겠습니까?'
      )
      if (!confirm) {
        loading.value = false
        return
      }
    }

    // 고가 품목 경고
    const highValueItems = orderForm.items.filter(isHighValueItem)
    if (highValueItems.length > 0) {
      const confirm = window.confirm(
        `THB 1,500을 초과하는 품목이 ${highValueItems.length}개 있습니다.\n` +
        '수취인 추가 정보가 필요할 수 있으며, 관세가 부과될 수 있습니다.\n' +
        '계속 진행하시겠습니까?'
      )
      if (!confirm) {
        loading.value = false
        return
      }
    }

    // 주문 데이터 준비
    const orderData = {
      ...orderForm,
      totalCBM: totalCBM.value,
      shippingType: shippingType.value,
      userId: authStore.user?.id,
      createdAt: new Date().toISOString()
    }

    // API 호출
    const response = await ordersApi.createOrder(orderData)
    
    if (response.success) {
      // 경고 메시지 처리
      if (response.warnings) {
        alert(response.warnings)
      }
      
      alert('주문이 성공적으로 접수되었습니다!')
      
      // 임시저장 데이터 삭제
      localStorage.removeItem('order_draft')
      
      router.push(`/orders/${response.order.orderNumber}`)
    } else {
      throw new Error(response.error || '주문 생성 실패')
    }
    
  } catch (error) {
    console.error('주문 접수 실패:', error)
    alert('주문 접수에 실패했습니다. 다시 시도해주세요.')
  } finally {
    loading.value = false
  }
}

const goBack = () => {
  router.go(-1)
}

onMounted(() => {
  // 사용자 정보로 발송인 정보 자동 입력
  if (authStore.user) {
    orderForm.sender.name = authStore.user.name || ''
    // phone은 user 정보에 따라 설정 (실제 구현에 맞게 수정)
  }
  
  // 임시저장 데이터 복원
  const draftData = localStorage.getItem('order_draft')
  if (draftData) {
    try {
      const draft = JSON.parse(draftData)
      Object.assign(orderForm, draft)
    } catch (error) {
      console.error('임시저장 데이터 복원 실패:', error)
    }
  }
</script>

<style scoped>
:root {
  --primary-50: #f0f9ff;
  --primary-100: #e0f2fe;
  --primary-200: #bae6fd;
  --primary-300: #7dd3fc;
  --primary-500: #3b82f6;
  --primary-600: #2563eb;
  --primary-700: #1d4ed8;
  --primary-800: #1e40af;
  --danger-50: #fef2f2;
  --danger-100: #fee2e2;
  --danger-500: #ef4444;
  --danger-700: #b91c1c;
  --success-500: #10b981;
}

.page-container {
  background: #f8fafc;
  min-height: 100vh;
  padding-bottom: 5rem;
}

.header {
  background: white;
  border-bottom: 1px solid var(--primary-100);
  padding: 1rem;
  position: sticky;
  top: 0;
  z-index: 40;
  box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1);
}

.header-content {
  display: flex;
  align-items: center;
  gap: 1rem;
  max-width: 1200px;
  margin: 0 auto;
}

.back-btn {
  background: none;
  border: none;
  color: var(--primary-600);
  font-size: 1.5rem;
  cursor: pointer;
  padding: 0.5rem;
  border-radius: 0.5rem;
  transition: all 0.2s ease;
}

.back-btn:hover {
  background: var(--primary-50);
}

.header-info h1 {
  font-size: 1.125rem;
  font-weight: 600;
  color: var(--primary-800);
  margin: 0;
}

.header-subtitle {
  font-size: 0.8rem;
  color: #6b7280;
  margin: 0;
}

.main-content {
  max-width: 800px;
  margin: 0 auto;
  padding: 1.5rem 1rem;
}

.form-progress {
  display: flex;
  align-items: center;
  justify-content: center;
  margin-bottom: 2rem;
}

.progress-step {
  display: flex;
  align-items: center;
  gap: 0.5rem;
}

.progress-number {
  width: 2rem;
  height: 2rem;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 0.875rem;
  font-weight: 600;
  color: #9ca3af;
  background: #f3f4f6;
}

.progress-number.active {
  background: var(--primary-500);
  color: white;
}

.progress-number.completed {
  background: var(--success-500);
  color: white;
}

.progress-text {
  font-size: 0.875rem;
  color: #6b7280;
  margin-left: 0.5rem;
}

.progress-text.active {
  color: var(--primary-600);
  font-weight: 500;
}

.progress-divider {
  width: 2rem;
  height: 2px;
  background: #e5e7eb;
  margin: 0 1rem;
}

.progress-divider.completed {
  background: var(--success-500);
}

.form-section {
  background: white;
  border-radius: 0.75rem;
  padding: 1.5rem;
  margin-bottom: 1.5rem;
  border: 1px solid var(--primary-100);
  box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1);
}

.section-title {
  font-size: 1.125rem;
  font-weight: 600;
  color: var(--primary-800);
  margin-bottom: 1.5rem;
  padding-bottom: 0.75rem;
  border-bottom: 2px solid var(--primary-200);
}

.form-row {
  display: grid;
  grid-template-columns: 1fr;
  gap: 1rem;
  margin-bottom: 1rem;
}

@media (min-width: 768px) {
  .form-row {
    grid-template-columns: repeat(2, 1fr);
  }
  
  .form-row.grid-3 {
    grid-template-columns: repeat(3, 1fr);
  }
}

.form-group {
  margin-bottom: 1rem;
}

.form-label {
  display: block;
  font-size: 0.875rem;
  font-weight: 500;
  color: #374151;
  margin-bottom: 0.5rem;
}

.form-label.required::after {
  content: ' *';
  color: var(--danger-500);
}

.form-input {
  width: 100%;
  padding: 0.875rem 1rem;
  border: 1px solid #d1d5db;
  border-radius: 0.75rem;
  font-size: 0.875rem;
  transition: all 0.2s ease;
  background: white;
  box-sizing: border-box;
}

.form-input:focus {
  outline: none;
  border-color: var(--primary-500);
  box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
}

.form-select {
  width: 100%;
  padding: 0.875rem 1rem;
  border: 1px solid #d1d5db;
  border-radius: 0.75rem;
  font-size: 0.875rem;
  background: white;
  cursor: pointer;
  box-sizing: border-box;
}

.form-textarea {
  width: 100%;
  padding: 0.875rem 1rem;
  border: 1px solid #d1d5db;
  border-radius: 0.75rem;
  font-size: 0.875rem;
  resize: vertical;
  min-height: 100px;
  font-family: inherit;
  box-sizing: border-box;
}

.form-hint {
  font-size: 0.75rem;
  color: var(--primary-600);
  background: var(--primary-50);
  padding: 0.5rem 0.75rem;
  border-radius: 0.5rem;
  margin-top: 0.5rem;
}

.warning-hint {
  background: #fff7ed;
  color: #ea580c;
  border: 1px solid #fed7aa;
}

.cbm-calculator {
  background: var(--primary-50);
  border: 1px solid var(--primary-200);
  border-radius: 0.75rem;
  padding: 1.5rem;
  margin: 1rem 0;
}

.cbm-title {
  font-size: 1rem;
  font-weight: 600;
  color: var(--primary-800);
  margin-bottom: 1rem;
}

.cbm-result {
  background: white;
  border: 1px solid var(--primary-200);
  border-radius: 0.5rem;
  padding: 1rem;
  margin-top: 1rem;
}

.cbm-display {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  font-size: 1.125rem;
  margin-bottom: 0.5rem;
}

.cbm-value {
  font-weight: bold;
  color: var(--primary-600);
}

.shipping-type-display {
  display: flex;
  align-items: center;
  gap: 0.5rem;
}

.shipping-badge {
  padding: 0.25rem 0.5rem;
  border-radius: 0.375rem;
  font-size: 0.75rem;
  font-weight: 500;
}

.badge-sea {
  background: var(--primary-100);
  color: var(--primary-700);
}

.badge-air {
  background: var(--danger-100);
  color: var(--danger-700);
}

.shipping-note {
  font-size: 0.75rem;
  color: #6b7280;
}

.item-list {
  margin-bottom: 1rem;
}

.item-card {
  background: #f8fafc;
  border: 1px solid #e5e7eb;
  border-radius: 0.75rem;
  padding: 1rem;
  margin-bottom: 1rem;
}

.item-header {
  display: flex;
  align-items: center;
  justify-content: space-between;
  margin-bottom: 1rem;
}

.item-title {
  font-weight: 600;
  color: var(--primary-800);
}

.remove-item-btn {
  background: none;
  border: none;
  color: var(--danger-500);
  cursor: pointer;
  padding: 0.25rem;
  border-radius: 0.25rem;
  transition: all 0.2s ease;
}

.remove-item-btn:hover {
  background: var(--danger-50);
}

.add-item-btn {
  background: none;
  border: 2px dashed var(--primary-300);
  color: var(--primary-600);
  padding: 1rem;
  border-radius: 0.75rem;
  cursor: pointer;
  transition: all 0.2s ease;
  width: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 0.5rem;
  margin-bottom: 1rem;
}

.add-item-btn:hover {
  background: var(--primary-50);
  border-color: var(--primary-500);
}

.form-actions {
  position: sticky;
  bottom: 5rem;
  background: white;
  border-top: 1px solid var(--primary-100);
  padding: 1rem;
  margin: 2rem -1rem -1rem -1rem;
  border-radius: 0 0 0.75rem 0.75rem;
  display: flex;
  gap: 1rem;
}

.btn-secondary {
  flex: 1;
  background: #f9fafb;
  color: #374151;
  border: 1px solid #d1d5db;
  padding: 0.875rem 1rem;
  border-radius: 0.75rem;
  font-size: 0.875rem;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s ease;
}

.btn-secondary:hover {
  background: #f3f4f6;
  border-color: #9ca3af;
}

.btn-primary {
  flex: 2;
  background: var(--primary-500);
  color: white;
  border: none;
  padding: 0.875rem 1rem;
  border-radius: 0.75rem;
  font-size: 0.875rem;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.2s ease;
}

.btn-primary:hover:not(:disabled) {
  background: var(--primary-600);
}

.btn-primary:disabled {
  background: #9ca3af;
  cursor: not-allowed;
}

.mobile-nav {
  position: fixed;
  bottom: 0;
  left: 0;
  right: 0;
  background: white;
  border-top: 1px solid #e5e7eb;
  padding: 1rem;
  z-index: 50;
}

.nav-grid {
  display: grid;
  grid-template-columns: repeat(5, 1fr);
  gap: 0.5rem;
  max-width: 400px;
  margin: 0 auto;
}

.nav-item {
  display: flex;
  flex-direction: column;
  align-items: center;
  padding: 0.5rem;
  background: none;
  border: none;
  color: #9ca3af;
  cursor: pointer;
  transition: all 0.2s ease;
}

.nav-item.active {
  color: var(--primary-600);
}

.nav-item:hover {
  color: var(--primary-500);
}

.nav-icon {
  width: 1.5rem;
  height: 1.5rem;
}

/* Media Queries */
@media (max-width: 768px) {
  .shipping-type-grid {
    grid-template-columns: 1fr;
  }
  
  .section-header {
    flex-direction: column;
    align-items: flex-start;
    gap: 1rem;
  }
  
  .section-actions {
    width: 100%;
    justify-content: flex-end;
  }
  
  .form-actions {
    flex-direction: column;
    bottom: 4rem;
  }
  
  .modal-overlay {
    padding: 0.5rem;
  }
  
  .bulk-step-content {
    flex-direction: column;
    align-items: flex-start;
    gap: 1rem;
  }
  
  .bulk-actions {
    flex-direction: column;
  }
}
</style>