name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  JAVA_VERSION: '17'

jobs:
  # Backend Testing
  test-backend:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test
          MYSQL_DATABASE: test_db
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_pass
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - uses: actions/checkout@v3
      
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: maven
      
      - name: Run backend tests
        working-directory: ./backend
        run: |
          mvn clean test \
            -Dspring.profiles.active=test \
            -Dspring.datasource.url=jdbc:mysql://localhost:3306/test_db \
            -Dspring.datasource.username=test_user \
            -Dspring.datasource.password=test_pass
      
      - name: Generate test report
        if: always()
        uses: dorny/test-reporter@v1
        with:
          name: Backend Test Results
          path: backend/target/surefire-reports/*.xml
          reporter: java-junit

  # Code Quality Analysis
  code-quality:
    runs-on: ubuntu-latest
    needs: test-backend
    
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: maven
      
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      
      - name: SonarCloud Scan
        working-directory: ./backend
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn clean verify sonar:sonar \
            -Dsonar.projectKey=ycs-lms \
            -Dsonar.organization=ycs \
            -Dsonar.host.url=https://sonarcloud.io

  # Build and Push Docker Image
  build-and-push:
    runs-on: ubuntu-latest
    needs: [test-backend, code-quality]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    permissions:
      contents: read
      packages: write
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}
            VERSION=${{ steps.meta.outputs.version }}

  # Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.ycs-lms.example.com
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure kubectl
        uses: azure/setup-kubectl@v3
      
      - name: Set up Kustomize
        uses: imranismail/setup-kustomize@v2
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2
      
      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name ycs-lms-staging --region ap-northeast-2
      
      - name: Deploy to staging
        run: |
          cd k8s/overlays/staging
          kustomize edit set image backend=${{ needs.build-and-push.outputs.image-tag }}
          kubectl apply -k .
          kubectl rollout status deployment/backend -n ycs-lms-staging --timeout=5m
      
      - name: Run smoke tests
        run: |
          ./scripts/smoke-test.sh https://staging.ycs-lms.example.com

  # Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://ycs-lms.example.com
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure kubectl
        uses: azure/setup-kubectl@v3
      
      - name: Set up Kustomize
        uses: imranismail/setup-kustomize@v2
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2
      
      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name ycs-lms-production --region ap-northeast-2
      
      - name: Create backup before deployment
        run: |
          kubectl exec -n ycs-lms-production deployment/backend -- /app/scripts/backup.sh
      
      - name: Deploy to production
        run: |
          cd k8s/overlays/production
          kustomize edit set image backend=${{ needs.build-and-push.outputs.image-tag }}
          kubectl apply -k .
          kubectl rollout status deployment/backend -n ycs-lms-production --timeout=10m
      
      - name: Run health checks
        run: |
          ./scripts/health-check.sh https://ycs-lms.example.com
      
      - name: Notify deployment
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            Production deployment ${{ job.status }}
            Commit: ${{ github.event.head_commit.message }}
            Author: ${{ github.event.head_commit.author.name }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # Rollback if needed
  rollback:
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: failure()
    
    steps:
      - name: Configure kubectl
        uses: azure/setup-kubectl@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2
      
      - name: Rollback deployment
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            aws eks update-kubeconfig --name ycs-lms-production --region ap-northeast-2
            kubectl rollout undo deployment/backend -n ycs-lms-production
          else
            aws eks update-kubeconfig --name ycs-lms-staging --region ap-northeast-2
            kubectl rollout undo deployment/backend -n ycs-lms-staging
          fi
      
      - name: Notify rollback
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              text: "⚠️ Deployment rollback initiated",
              attachments: [{
                color: 'warning',
                text: 'Automatic rollback triggered due to deployment failure'
              }]
            }
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}